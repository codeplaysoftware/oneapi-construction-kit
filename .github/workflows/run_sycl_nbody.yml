
name: Build and Run OCK Demo sycl_nbody
on:
  pull_request:
    paths:
      - '.github/workflows/run_sycl_nbody.yml'
  schedule:
    - cron: '59 23 * * 5'  # Run every Friday at 11:59 PM
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:

  # build and run for RISCV
  run_riscv_m1_ock_demo_sycl_nbody:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

       # installs tools, ninja, installs llvm and sets up sccahe
      - name: setup ubuntu
        uses:  ./.github/actions/setup_ubuntu_build
        with:
          llvm_version: 17
          llvm_build_type: RelAssert

      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install Python libraries and system dependencies
        run: |
          pip install --user requests numpy h5py Pillow
          sudo add-apt-repository universe
          sudo apt-get update
          sudo apt-get install -y libglfw3-dev libglm-dev libglew-dev libblas-dev libopenblas64-dev libopenblas-dev libpthread-stubs0-dev libboost-all-dev

      - name: Get Intel OneAPI BaseToolkit
        run: |
          wget https://registrationcenter-download.intel.com/akdlm/IRC_NAS/163da6e4-56eb-4948-aba3-debcec61c064/l_BaseKit_p_2024.0.1.46.sh
          export TERMINFO=/usr/lib/terminfo
          sh $(pwd)/l_BaseKit_p_2024.0.1.46.sh -a --silent --eula accept --action install --components 'intel.oneapi.lin.dpcpp-cpp-compiler':'intel.oneapi.lin.dpcpp-ct'

      - name: Build riscv M1
        uses: ./.github/actions/do_build_ock/do_build_m1
        with:
          build_type: Release
          extra_flags: '-DCA_REFSI_M1_DEMO_MODE=ON'

      - name: Create OCK install
        run: |
          ninja -C $(pwd)/build install

      - name: Clone sycl_nbody
        run: git clone --recursive --depth 1 --single-branch https://github.com/codeplaysoftware/cuda-to-sycl-nbody.git

      - name: Set up Environment and build
        run: |
          # Set environment variables
          export LD_LIBRARY_PATH=$(pwd)/install/lib:/home/runner/intel/oneapi/compiler/2024.0/lib/libsycl.so:/home/runner/intel/oneapi/compiler/2024.0/lib:$LD_LIBRARY_PATH
          export CMAKE_CXX_COMPILER=/home/runner/intel/oneapi/compiler/2024.0/bin/compiler/clang++
          export CMAKE_C_COMPILER=/home/runner/intel/oneapi/compiler/2024.0/bin/compiler/clang
          export CA_HAL_DEBUG=1
          export CA_PROFILE_LEVEL=3
          export ONEAPI_DEVICE_SELECTOR=opencl:fpga
          export OCL_ICD_FILENAMES=$(pwd)/install/lib/libCL.so
          # As the oneAPI basetoolkit release has a whitelist of devices, it filters out RefSi.
          # To override it, as a temporary solution we can point SYCL_CONFIG_FILE_NAME to ``.
          # This way it doesn't set the default sycl.conf.
          export SYCL_CONFIG_FILE_NAME=""
          export PATH=/home/runner/intel/oneapi/compiler/2024.0/bin/icpx:/home/runner/intel/oneapi/compiler/2024.0/bin:/home/runner/intel/oneapi/compiler/2024.0/lib:$PATH

          export OCL_ICD_VENDORS=/dev/null
          export dpct_INCLUDE_DIR=/home/runner/intel/oneapi/compiler/2024.0/include
          export dpct_LOCATION=/home/runner/intel/oneapi/2024.0/

          export CXX=icpx
          export CC=icpx
          cmake cuda-to-sycl-nbody -GNinja -B sycl_nbody_build  -DRENDER=off -DGLEW_LIBRARY=/usr/lib/x86_64-linux-gnu/libGLEW.so -DBACKEND=DPCPP -DDPCPP_CUDA_SUPPORT=off
          ninja -C sycl_nbody_build
          ls -laR sycl_nbody_build
          #chmod +x scripts/build_dpcpp.sh
          #sh scripts/build_dpcpp.sh #-DBACKEND=DPCP #-DDPCPP_CUDA_SUPPORT=off -nocudalib
          CA_HAL_DEBUG=1 OCL_ICD_FILENAMES=$(pwd)/build/lib/libCL.so ONEAPI_DEVICE_SELECTOR=opencl:fpga SYCL_CONFIG_FILE_NAME=  cuda-to-sycl-nbody/nbody_dpcpp 1

