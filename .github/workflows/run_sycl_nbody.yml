
name: Build and Run OCK Demo sycl_nbody
on:
  pull_request:
    paths:
      - '.github/workflows/run_sycl_nbody.yml'
  schedule:
    - cron: '59 23 * * 5'  # Run every Friday at 11:59 PM
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:

  # build and run for RISCV
  run_riscv_m1_ock_demo_sycl_nbody:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

       # installs tools, ninja, installs llvm and sets up sccahe
      - name: setup ubuntu
        uses:  ./.github/actions/setup_ubuntu_build
        with:
          llvm_version: 17
          llvm_build_type: RelAssert

      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install Python libraries and system dependencies
        run: |
          pip install --user requests numpy h5py Pillow
          sudo add-apt-repository universe
          sudo apt-get update
          sudo apt-get install -y libblas-dev libopenblas64-dev libopenblas-dev libpthread-stubs0-dev libboost-all-dev

      - name: Build riscv M1
        uses: ./.github/actions/do_build_ock/do_build_m1
        with:
          build_type: Release
          extra_flags: '-DCA_REFSI_M1_DEMO_MODE=ON'

      - name: Create OCK install
        run: |
          ninja -C $(pwd)/build install

      # - name: Get Intel OneAPI BaseToolkit
      #   run: |
      #     wget https://registrationcenter-download.intel.com/akdlm/IRC_NAS/163da6e4-56eb-4948-aba3-debcec61c064/l_BaseKit_p_2024.0.1.46.sh
      #     export TERMINFO=/usr/lib/terminfo
      #     if [ -d "/opt/intel/oneapi" ]; then
      #       echo "Intel oneAPI Base Toolkit is installed."
      #     else
      #       echo "Intel oneAPI Base Toolkit is not installed."
      #     fi
      #     ls
      #     sudo sh $(pwd)/l_BaseKit_p_2024.0.1.46.sh -a --silent --eula accept --action install --components 'intel.oneapi.lin.dpcpp-cpp-compiler'
      #     # sudo sh $(pwd)/l_BaseKit_p_2024.0.1.46.sh -a --silent --eula accept --action install --components 'intel.oneapi.lin.dpcpp-ct'
      #     # sudo sh $(pwd)/l_BaseKit_p_2024.0.1.46.sh -a --silent --eula accept --action install --components 'intel.oneapi.lin.dpcpp_dbg'
      #     # sudo sh $(pwd)/l_BaseKit_p_2024.0.1.46.sh -a --silent --eula accept --action install --components 'intel.oneapi.lin.dpl'
      #     # sudo sh $(pwd)/l_BaseKit_p_2024.0.1.46.sh -a --silent --eula accept --action install --components 'intel.oneapi.lin.tbb.devel'

      - name: Clone sycl_nbody
        run: git clone --recursive --depth 1 --single-branch https://github.com/codeplaysoftware/cuda-to-sycl-nbody.git

      - name: Download Daily Release
        run: |
          # Update the nightly release from intel/llvm from 2024-01-30 to daily once
          # everything has stablised
          wget "https://github.com/intel/llvm/releases/download/nightly-2024-01-30/sycl_linux.tar.gz"
          mkdir linux_nightly_release
          tar -xzf sycl_linux.tar.gz -C linux_nightly_release

      - name: Set up Environment and build
        run: |
          # Set environment variables
          export LD_LIBRARY_PATH=$(pwd)/install/lib:$(pwd)/linux_nightly_release/lib/libsycl.so:$(pwd)/linux_nightly_release/lib:$LD_LIBRARY_PATH
          export CMAKE_CXX_COMPILER=$(pwd)/linux_nightly_release/bin/clang++
          export CMAKE_C_COMPILER=$(pwd)/linux_nightly_release/bin/clang
          export CA_HAL_DEBUG=1
          export CA_PROFILE_LEVEL=3
          export ONEAPI_DEVICE_SELECTOR=opencl:fpga
          export OCL_ICD_FILENAMES=$(pwd)/install/lib/libCL.so
          # As the oneAPI basetoolkit release has a whitelist of devices, it filters out RefSi.
          # To override it, as a temporary solution we can point SYCL_CONFIG_FILE_NAME to ``.
          # This way it doesn't set the default sycl.conf.
          export SYCL_CONFIG_FILE_NAME=""


          export OCL_ICD_VENDORS=/dev/null
          export dpct_INCLUDE_DIR=$(pwd)/linux_nightly_release/include
          export dpct_LOCATION=$(pwd)/linux_nightly_release

          cd cuda-to-sycl-nbody
          ls scripts
          chmod +x scripts/build_dpcpp.sh
          CMAKE_CXX_COMPILER=$(pwd)/linux_nightly_release/bin/clang++ sh scripts/build_dpcpp.sh -DBACKEND=DPCP #-DDPCPP_CUDA_SUPPORT=off -nocudalib
          #CA_HAL_DEBUG=1 OCL_ICD_FILENAMES=${{ inputs.workspace }}/build/lib/libCL.so ONEAPI_DEVICE_SELECTOR=opencl:acc SYCL_CONFIG_FILE_NAME=  ./nbody_dpcpp 1

      # - name: Build sycl_nbody
      #   uses: ./.github/actions/build_sycl_nbody_action
      #   with:
      #     workspace: ${{ github.workspace }}
